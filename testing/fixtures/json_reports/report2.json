[
  {
    "uri": "features/feature3.feature",
    "id": "i-am-some-other-feature-for-testing-some-broken-functionality",
    "keyword": "Feature",
    "name": "I am some other feature for testing some broken functionality",
    "description": "",
    "line": 1,
    "elements": [
      {
        "id": "i-am-some-other-feature-for-testing-some-broken-functionality;i-am-some-failed-testing-scenario-of-some-functionality",
        "keyword": "Scenario",
        "name": "I am some failed testing scenario of some functionality",
        "description": "",
        "line": 4,
        "type": "scenario",
        "tags": [
          {
            "name": "@scenario",
            "line": 3
          },
          {
            "name": "@screenshot",
            "line": 3
          }
        ],
        "before": [
          {
            "match": {
              "location": "features/support/hooks.rb:1"
            },
            "result": {
              "status": "passed",
              "duration": 36000
            }
          }
        ],
        "steps": [
          {
            "keyword": "Given ",
            "name": "I am give step of some feature",
            "line": 5,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:1"
            },
            "result": {
              "status": "passed",
              "duration": 67000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 18000
                }
              }
            ]
          },
          {
            "keyword": "When ",
            "name": "I am when step which will fail",
            "line": 6,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:25"
            },
            "result": {
              "status": "failed",
              "error_message": "I am some error (RuntimeError)\n./features/step_definitions/sample_steps.rb:26:in `/^I am when step which will fail$/'\nfeatures/feature3.feature:6:in `When I am when step which will fail'",
              "duration": 222000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "skipped"
                }
              }
            ]
          },
          {
            "keyword": "Then ",
            "name": "I am then step of some feature",
            "line": 7,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:8"
            },
            "result": {
              "status": "skipped"
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "skipped"
                }
              }
            ]
          }
        ],
        "after": [
          {
            "embeddings": [
              {
                "mime_type": "image/png",
                "data": ""
              }
            ],
            "match": {
              "location": "features/support/hooks.rb:7"
            },
            "result": {
              "status": "passed",
              "duration": 14702982000
            }
          }
        ]
      },
      {
        "id": "i-am-some-other-feature-for-testing-some-broken-functionality;i-am-some-undefined-testing-scenario-of-some-functionality",
        "keyword": "Scenario",
        "name": "I am some undefined testing scenario of some functionality",
        "description": "",
        "line": 10,
        "type": "scenario",
        "tags": [
          {
            "name": "@wip",
            "line": 9
          }
        ],
        "before": [
          {
            "match": {
              "location": "features/support/hooks.rb:1"
            },
            "result": {
              "status": "passed",
              "duration": 33000
            }
          }
        ],
        "steps": [
          {
            "keyword": "Given ",
            "name": "I am give step of some other feature",
            "line": 11,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:11"
            },
            "result": {
              "status": "passed",
              "duration": 53000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 14000
                }
              }
            ]
          },
          {
            "keyword": "When ",
            "name": "I am when step of some other feature",
            "line": 12,
            "output": [
              "123"
            ],
            "match": {
              "location": "features/step_definitions/sample_steps.rb:14"
            },
            "result": {
              "status": "passed",
              "duration": 55000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 15000
                }
              }
            ]
          },
          {
            "keyword": "Then ",
            "name": "I am then step of some undefined feature",
            "line": 13,
            "match": {
              "location": "features/feature3.feature:13"
            },
            "result": {
              "status": "undefined"
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "skipped"
                }
              }
            ]
          }
        ],
        "after": [
          {
            "match": {
              "location": "features/support/hooks.rb:7"
            },
            "result": {
              "status": "passed",
              "duration": 38000
            }
          }
        ]
      },
      {
        "id": "i-am-some-other-feature-for-testing-some-broken-functionality;i-am-some-pending-testing-scenario-of-some-functionality",
        "keyword": "Scenario",
        "name": "I am some pending testing scenario of some functionality",
        "description": "",
        "line": 16,
        "type": "scenario",
        "tags": [
          {
            "name": "@scenario",
            "line": 15
          }
        ],
        "before": [
          {
            "match": {
              "location": "features/support/hooks.rb:1"
            },
            "result": {
              "status": "passed",
              "duration": 22000
            }
          }
        ],
        "steps": [
          {
            "keyword": "Given ",
            "name": "I am give step of some other feature",
            "line": 17,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:11"
            },
            "result": {
              "status": "passed",
              "duration": 31000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 11000
                }
              }
            ]
          },
          {
            "keyword": "When ",
            "name": "I am when step of some other feature",
            "line": 18,
            "output": [
              "123"
            ],
            "match": {
              "location": "features/step_definitions/sample_steps.rb:14"
            },
            "result": {
              "status": "passed",
              "duration": 46000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 9000
                }
              }
            ]
          },
          {
            "keyword": "Then ",
            "name": "I am then step of some pending feature",
            "line": 19,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:21"
            },
            "result": {
              "status": "pending",
              "error_message": "TODO (Cucumber::Pending)\n./features/step_definitions/sample_steps.rb:22:in `/^I am then step of some pending feature$/'\nfeatures/feature3.feature:19:in `Then I am then step of some pending feature'",
              "duration": 139000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "skipped"
                }
              }
            ]
          }
        ],
        "after": [
          {
            "match": {
              "location": "features/support/hooks.rb:7"
            },
            "result": {
              "status": "passed",
              "duration": 20000
            }
          }
        ]
      },
      {
        "id": "i-am-some-other-feature-for-testing-some-broken-functionality;i-am-some-testing-scenario-of-some-functionality",
        "keyword": "Scenario",
        "name": "I am some testing scenario of some functionality",
        "description": "",
        "line": 22,
        "type": "scenario",
        "tags": [
          {
            "name": "@high",
            "line": 21
          }
        ],
        "before": [
          {
            "match": {
              "location": "features/support/hooks.rb:1"
            },
            "result": {
              "status": "passed",
              "duration": 31000
            }
          }
        ],
        "steps": [
          {
            "keyword": "Given ",
            "name": "I am give step of some feature",
            "line": 23,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:1"
            },
            "result": {
              "status": "passed",
              "duration": 44000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 12000
                }
              }
            ]
          },
          {
            "keyword": "When ",
            "name": "I am when step of some feature",
            "line": 24,
            "output": [
              "$ ABC % XYZ £"
            ],
            "match": {
              "location": "features/step_definitions/sample_steps.rb:4"
            },
            "result": {
              "status": "passed",
              "duration": 96000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 12000
                }
              }
            ]
          },
          {
            "keyword": "Then ",
            "name": "I am then step of some feature",
            "line": 25,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:8"
            },
            "result": {
              "status": "passed",
              "duration": 24000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 6000
                }
              }
            ]
          }
        ],
        "after": [
          {
            "match": {
              "location": "features/support/hooks.rb:7"
            },
            "result": {
              "status": "passed",
              "duration": 16000
            }
          }
        ]
      },
      {
        "id": "i-am-some-other-feature-for-testing-some-broken-functionality;i-am-some-other-testing-scenario-of-some-functionality",
        "keyword": "Scenario",
        "name": "I am some other testing scenario of some functionality",
        "description": "",
        "line": 28,
        "type": "scenario",
        "tags": [
          {
            "name": "@low",
            "line": 27
          }
        ],
        "before": [
          {
            "match": {
              "location": "features/support/hooks.rb:1"
            },
            "result": {
              "status": "passed",
              "duration": 12000
            }
          }
        ],
        "steps": [
          {
            "keyword": "Given ",
            "name": "I am give step of some other feature",
            "line": 29,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:11"
            },
            "result": {
              "status": "passed",
              "duration": 22000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 10000
                }
              }
            ]
          },
          {
            "keyword": "When ",
            "name": "I am when step of some other feature",
            "line": 30,
            "output": [
              "123"
            ],
            "match": {
              "location": "features/step_definitions/sample_steps.rb:14"
            },
            "result": {
              "status": "passed",
              "duration": 39000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 18000
                }
              }
            ]
          },
          {
            "keyword": "Then ",
            "name": "I am then step of some other feature",
            "line": 31,
            "match": {
              "location": "features/step_definitions/sample_steps.rb:18"
            },
            "result": {
              "status": "passed",
              "duration": 65000
            },
            "after": [
              {
                "match": {
                  "location": "features/support/hooks.rb:4"
                },
                "result": {
                  "status": "passed",
                  "duration": 32000
                }
              }
            ]
          }
        ],
        "after": [
          {
            "match": {
              "location": "features/support/hooks.rb:7"
            },
            "result": {
              "status": "passed",
              "duration": 36000
            }
          }
        ]
      }
    ]
  }
]